// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package book

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// BookBetInfo is an auto generated low-level Go binding around an user-defined struct.
type BookBetInfo struct {
	State        uint8
	Participants []common.Address
	Moderator    common.Address
	AmountBetWei *big.Int
	Expiration   *big.Int
}

// BookMetaData contains all meta data concerning the Book contract.
var BookMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"EventLog\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"}],\"name\":\"BetDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"State\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"Participants\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"Moderator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"AmountBetWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Expiration\",\"type\":\"uint256\"}],\"internalType\":\"structBook.BetInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"}],\"name\":\"CancelBetExpired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amountFeeWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"CancelBetModerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amountFeeWei\",\"type\":\"uint256\"}],\"name\":\"CancelBetOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amountFeeWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"nonces\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"CancelBetParticipants\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Drain\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amountBetWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountFeeWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"moderator\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"participants\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nonces\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"PlaceBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"}],\"name\":\"ReconcileBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x6080604052348015600e575f80fd5b50335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550614a658061005b5f395ff3fe6080604052600436106100dc575f3560e01c80637c64ce361161007e578063e2a06aca11610058578063e2a06aca14610260578063e63f341f14610288578063ed21248c146102c4578063f8856b88146102ce576100dc565b80637c64ce3614610204578063b4a99a4e1461022c578063d67a073f14610256576100dc565b8063221da6a5116100ba578063221da6a51461015a57806330d0cee914610182578063364529e5146101be57806357ea89b6146101fa576100dc565b80630e302132146100e05780630ee216b7146101085780630ef6788714610130575b5f80fd5b3480156100eb575f80fd5b5061010660048036038101906101019190613149565b6102f6565b005b348015610113575f80fd5b5061012e60048036038101906101299190613205565b6108a4565b005b34801561013b575f80fd5b50610144610b3b565b604051610151919061326e565b60405180910390f35b348015610165575f80fd5b50610180600480360381019061017b919061339c565b610b82565b005b34801561018d575f80fd5b506101a860048036038101906101a39190613458565b611155565b6040516101b5919061326e565b60405180910390f35b3480156101c9575f80fd5b506101e460048036038101906101df9190613483565b6111f5565b6040516101f1919061361e565b60405180910390f35b61020261140a565b005b34801561020f575f80fd5b5061022a6004803603810190610225919061363e565b61159a565b005b348015610237575f80fd5b50610240611a99565b60405161024d91906136ed565b60405180910390f35b61025e611abc565b005b34801561026b575f80fd5b5061028660048036038101906102819190613706565b611bca565b005b348015610293575f80fd5b506102ae60048036038101906102a99190613458565b6123ab565b6040516102bb919061326e565b60405180910390f35b6102cc61244b565b005b3480156102d9575f80fd5b506102f460048036038101906102ef9190613483565b61254b565b005b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461034c575f80fd5b5f60028660405161035d9190613896565b90815260200160405180910390209050600160ff16815f015f015f9054906101000a900460ff1660ff16146103c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103be90613906565b60405180910390fd5b805f0160040154421015610449576103de426127f1565b6103ed825f01600401546127f1565b6040516020016103fe9291906139e0565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104409190613a64565b60405180910390fd5b8460015f835f016002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060020154146104f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e790613ace565b60405180910390fd5b5f86825f016002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff168760405160200161052b93929190613aec565b6040516020818303038152906040528051906020012090505f8061055083888861296f565b91509150805f01511561059e5780602001516040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105959190613a64565b60405180910390fd5b835f016002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610631576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062890613b72565b60405180910390fd5b5f5b85518110156106ee57846005015f87838151811061065457610653613b90565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff166106e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d890613c2d565b60405180910390fd5b8080600101915050610633565b505f6002855f01600301546107039190613c78565b90505f8651826107139190613ce6565b90505f5b875181101561079d578160015f8a848151811061073757610736613b90565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001015f8282546107899190613d16565b925050819055508080600101915050610717565b5060015f875f016002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206002015f81548092919061081390613d49565b91905055506002865f015f015f6101000a81548160ff021916908360ff1602179055505f865f01600301819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a8b6040516020016108739190613db6565b60405160208183030381529060405260405161088f9190613a64565b60405180910390a15050505050505050505050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108fa575f80fd5b5f60028360405161090b9190613896565b90815260200160405180910390209050600160ff16815f015f015f9054906101000a900460ff1660ff1614610975576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096c90613906565b60405180910390fd5b5f82825f01600301546109889190613ddb565b90505f5b825f0160010180549050811015610ab5578160015f855f0160010184815481106109b9576109b8613b90565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001015f828254610a2b9190613d16565b925050819055508360015f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001015f828254610aa19190613d16565b92505081905550808060010191505061098c565b506003825f015f015f6101000a81548160ff021916908360ff1602179055505f825f01600301819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a84604051602001610b119190613e34565b604051602081830303815290604052604051610b2d9190613a64565b60405180910390a150505050565b5f60015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010154905090565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bd8575f80fd5b5f600286604051610be99190613896565b90815260200160405180910390209050600160ff16815f015f015f9054906101000a900460ff1660ff1614610c53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4a90613906565b60405180910390fd5b82829050815f0160010180549050141580610c7857508351815f016001018054905014155b15610cb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610caf90613ec9565b60405180910390fd5b5f5b815f0160010180549050811015610f8b575f825f016001018281548110610ce457610ce3613b90565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f868381518110610d2257610d21613b90565b5b60200260200101519050365f878786818110610d4157610d40613b90565b5b9050602002810190610d539190613ef3565b915091508260015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206002015414610e0257610da784612afd565b604051602001610db79190613f7b565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df99190613a64565b60405180910390fd5b5f8b8585604051602001610e1893929190613aec565b6040516020818303038152906040528051906020012090505f80610e3d83868661296f565b91509150805f015115610e8b5780602001516040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e829190613a64565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610f2257610ec787612afd565b604051602001610ed79190613fc6565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f199190613a64565b60405180910390fd5b60015f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206002015f815480929190610f7290613d49565b9190505550505050505050508080600101915050610cba565b505f85825f0160030154610f9f9190613ddb565b90505f5b825f01600101805490508110156110cc578160015f855f016001018481548110610fd057610fcf613b90565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001015f8282546110429190613d16565b925050819055508660015f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001015f8282546110b89190613d16565b925050819055508080600101915050610fa3565b506003825f015f015f6101000a81548160ff021916908360ff1602179055505f825f01600301819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a87604051602001611128919061405b565b6040516020818303038152906040526040516111449190613a64565b60405180910390a150505050505050565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111ad575f80fd5b60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20600201549050919050565b6111fd612d51565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611253575f80fd5b5f60ff166002836040516112679190613896565b90815260200160405180910390205f015f015f9054906101000a900460ff1660ff16036112c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c0906140c6565b60405180910390fd5b6002826040516112d99190613896565b90815260200160405180910390205f016040518060a00160405290815f82015f9054906101000a900460ff1660ff1660ff1681526020016001820180548060200260200160405190810160405280929190818152602001828054801561139157602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611348575b50505050508152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820154815250509050919050565b5f3390505f60015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001015490505f8103611494576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148b9061412e565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f193505050501580156114d7573d5f803e3d5ffd5b508060015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001015f8282546115279190613ddb565b925050819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a61155833612afd565b611561836127f1565b604051602001611572929190614198565b60405160208183030381529060405260405161158e9190613a64565b60405180910390a15050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146115f0575f80fd5b5f6002866040516116019190613896565b90815260200160405180910390209050600160ff16815f015f015f9054906101000a900460ff1660ff161461166b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166290613906565b60405180910390fd5b8360015f835f016002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206002015414611712576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170990613ace565b60405180910390fd5b5f86825f016002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660405160200161174d93929190613aec565b6040516020818303038152906040528051906020012090505f8061177283878761296f565b91509150805f0151156117c05780602001516040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b79190613a64565b60405180910390fd5b835f016002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611853576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184a90613b72565b60405180910390fd5b5f88855f01600301546118669190613ddb565b90505f5b855f0160010180549050811015611993578160015f885f01600101848154811061189757611896613b90565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001015f8282546119099190613d16565b925050819055508960015f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001015f82825461197f9190613d16565b92505081905550808060010191505061186a565b5060015f865f016002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206002015f815480929190611a0990613d49565b91905055506003855f015f015f6101000a81548160ff021916908360ff1602179055505f855f01600301819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a8a604051602001611a69919061420e565b604051602081830303815290604052604051611a859190613a64565b60405180910390a150505050505050505050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b12575f80fd5b5f3390505f4790508173ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015611b5d573d5f803e3d5ffd5b507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a611b8883612afd565b611b91836127f1565b604051602001611ba2929190614259565b604051602081830303815290604052604051611bbe9190613a64565b60405180910390a15050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611c20575f80fd5b5f60ff1660028a604051611c349190613896565b90815260200160405180910390205f015f015f9054906101000a900460ff1660ff1614611c96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8d906142f3565b60405180910390fd5b5f8789611ca39190613d16565b90505f5b8551811015611fa2575f868281518110611cc457611cc3613b90565b5b602002602001015190505f868381518110611ce257611ce1613b90565b5b60200260200101519050365f878786818110611d0157611d00613b90565b5b9050602002810190611d139190613ef3565b915091508560015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20600101541015611dc357611d6884612afd565b604051602001611d789190614337565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dba9190613a64565b60405180910390fd5b8260015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206002015414611e6e57611e1384612afd565b604051602001611e239190614382565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e659190613a64565b60405180910390fd5b5f8f8585604051602001611e8493929190613aec565b6040516020818303038152906040528051906020012090505f80611ea983868661296f565b91509150805f015115611ef75780602001516040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eee9190613a64565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611f8e57611f3387612afd565b604051602001611f439190613fc6565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f859190613a64565b60405180910390fd5b505050505050508080600101915050611ca7565b506040518060a00160405280600160ff1681526020018681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018a81526020018881525060028b604051611ff49190613896565b90815260200160405180910390205f015f820151815f015f6101000a81548160ff021916908360ff160217905550602082015181600101908051906020019061203e929190612d95565b506040820151816002015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030155608082015181600401559050505f5b8551811015612268575f8682815181106120bb576120ba613b90565b5b602002602001015190508260015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001015f8282546121149190613ddb565b9250508190555060015f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206002015f81548092919061216b90613d49565b91905055508960015f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001015f8282546121df9190613d16565b92505081905550600160028d6040516121f89190613896565b90815260200160405180910390206005015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555050808060010191505061209e565b5060015f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015f9054906101000a900460ff166123495760405180606001604052806001151581526020015f81526020015f81525060015f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f015f6101000a81548160ff02191690831515021790555060208201518160010155604082015181600201559050505b7fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a8a60405160200161237b91906143cd565b6040516020818303038152906040526040516123979190613a64565b60405180910390a150505050505050505050565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612403575f80fd5b60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20600101549050919050565b3460015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001015f82825461249a9190613d16565b925050819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a6124cb33612afd565b61251460015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20600101546127f1565b60405160200161252592919061443e565b6040516020818303038152906040526040516125419190613a64565b60405180910390a1565b5f60028260405161255c9190613896565b90815260200160405180910390209050600160ff16815f015f015f9054906101000a900460ff1660ff16146125c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125bd90613906565b60405180910390fd5b62278d00815f01600401546125db9190613d16565b42101561261d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612614906144fe565b60405180910390fd5b806005015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff166126a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269f9061458c565b60405180910390fd5b5f5b815f016001018054905081101561276357815f016003015460015f845f0160010184815481106126dd576126dc613b90565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001015f82825461274f9190613d16565b9250508190555080806001019150506126aa565b506003815f015f015f6101000a81548160ff021916908360ff1602179055505f815f01600301819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a826127b833612afd565b6040516020016127c99291906145f6565b6040516020818303038152906040526040516127e59190613a64565b60405180910390a15050565b60605f8203612837576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061296a565b5f8290505f5b5f821461286657808061284f90613d49565b915050600a8261285f9190613ce6565b915061283d565b5f8167ffffffffffffffff81111561288157612880612e7b565b5b6040519080825280601f01601f1916602001820160405280156128b35781602001600182028036833780820191505090505b5090505f8290505b5f8614612962576001816128cf9190613ddb565b90505f600a80886128e09190613ce6565b6128ea9190613c78565b876128f59190613ddb565b60306129019190614637565b90505f8160f81b90508084848151811061291e5761291d613b90565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350600a886129599190613ce6565b975050506128bb565b819450505050505b919050565b5f612978612e1c565b604184849050146129cb575f6129c26040518060400160405280601881526020017f696e76616c6964207369676e6174757265206c656e6774680000000000000000815250612cb3565b91509150612af5565b5f6040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a33320000000081525090505f8187604051602001612a189291906146d8565b6040516020818303038152906040528051906020012090505f86865f90602092612a4493929190614707565b90612a4f9190614757565b90505f8787602090604092612a6693929190614707565b90612a719190614757565b90505f88886040818110612a8857612a87613b90565b5b9050013560f81c60f81b60f81c90506001848285856040515f8152602001604052604051612ab994939291906147d3565b6020604051602081039080840390855afa158015612ad9573d5f803e3d5ffd5b50505060206040510351612aeb612cda565b9650965050505050505b935093915050565b60605f602867ffffffffffffffff811115612b1b57612b1a612e7b565b5b6040519080825280601f01601f191660200182016040528015612b4d5781602001600182028036833780820191505090505b5090505f5b6014811015612ca9575f816013612b699190613ddb565b6008612b759190613c78565b6002612b819190614945565b8573ffffffffffffffffffffffffffffffffffffffff16612ba29190613ce6565b60f81b90505f60108260f81c612bb8919061498f565b60f81b90505f8160f81c6010612bce91906149bf565b8360f81c612bdc91906149fb565b60f81b9050612bea82612d0c565b85856002612bf89190613c78565b81518110612c0957612c08613b90565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350612c4081612d0c565b856001866002612c509190613c78565b612c5a9190613d16565b81518110612c6b57612c6a613b90565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053505050508080600101915050612b52565b5080915050919050565b612cbb612e1c565b6040518060400160405280600115158152602001838152509050919050565b612ce2612e1c565b60405180604001604052805f1515815260200160405180602001604052805f815250815250905090565b5f600a8260f81c60ff161015612d365760308260f81c612d2c9190614637565b60f81b9050612d4c565b60578260f81c612d469190614637565b60f81b90505b919050565b6040518060a001604052805f60ff168152602001606081526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f81525090565b828054828255905f5260205f20908101928215612e0b579160200282015b82811115612e0a578251825f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612db3565b5b509050612e189190612e37565b5090565b60405180604001604052805f15158152602001606081525090565b5b80821115612e4e575f815f905550600101612e38565b5090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b612eb182612e6b565b810181811067ffffffffffffffff82111715612ed057612ecf612e7b565b5b80604052505050565b5f612ee2612e52565b9050612eee8282612ea8565b919050565b5f67ffffffffffffffff821115612f0d57612f0c612e7b565b5b612f1682612e6b565b9050602081019050919050565b828183375f83830152505050565b5f612f43612f3e84612ef3565b612ed9565b905082815260208101848484011115612f5f57612f5e612e67565b5b612f6a848285612f23565b509392505050565b5f82601f830112612f8657612f85612e63565b5b8135612f96848260208601612f31565b91505092915050565b5f819050919050565b612fb181612f9f565b8114612fbb575f80fd5b50565b5f81359050612fcc81612fa8565b92915050565b5f80fd5b5f80fd5b5f8083601f840112612fef57612fee612e63565b5b8235905067ffffffffffffffff81111561300c5761300b612fd2565b5b60208301915083600182028301111561302857613027612fd6565b5b9250929050565b5f67ffffffffffffffff82111561304957613048612e7b565b5b602082029050602081019050919050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6130838261305a565b9050919050565b61309381613079565b811461309d575f80fd5b50565b5f813590506130ae8161308a565b92915050565b5f6130c66130c18461302f565b612ed9565b905080838252602082019050602084028301858111156130e9576130e8612fd6565b5b835b8181101561311257806130fe88826130a0565b8452602084019350506020810190506130eb565b5050509392505050565b5f82601f8301126131305761312f612e63565b5b81356131408482602086016130b4565b91505092915050565b5f805f805f6080868803121561316257613161612e5b565b5b5f86013567ffffffffffffffff81111561317f5761317e612e5f565b5b61318b88828901612f72565b955050602061319c88828901612fbe565b945050604086013567ffffffffffffffff8111156131bd576131bc612e5f565b5b6131c988828901612fda565b9350935050606086013567ffffffffffffffff8111156131ec576131eb612e5f565b5b6131f88882890161311c565b9150509295509295909350565b5f806040838503121561321b5761321a612e5b565b5b5f83013567ffffffffffffffff81111561323857613237612e5f565b5b61324485828601612f72565b925050602061325585828601612fbe565b9150509250929050565b61326881612f9f565b82525050565b5f6020820190506132815f83018461325f565b92915050565b5f67ffffffffffffffff8211156132a1576132a0612e7b565b5b602082029050602081019050919050565b5f6132c46132bf84613287565b612ed9565b905080838252602082019050602084028301858111156132e7576132e6612fd6565b5b835b8181101561331057806132fc8882612fbe565b8452602084019350506020810190506132e9565b5050509392505050565b5f82601f83011261332e5761332d612e63565b5b813561333e8482602086016132b2565b91505092915050565b5f8083601f84011261335c5761335b612e63565b5b8235905067ffffffffffffffff81111561337957613378612fd2565b5b60208301915083602082028301111561339557613394612fd6565b5b9250929050565b5f805f805f608086880312156133b5576133b4612e5b565b5b5f86013567ffffffffffffffff8111156133d2576133d1612e5f565b5b6133de88828901612f72565b95505060206133ef88828901612fbe565b945050604086013567ffffffffffffffff8111156134105761340f612e5f565b5b61341c8882890161331a565b935050606086013567ffffffffffffffff81111561343d5761343c612e5f565b5b61344988828901613347565b92509250509295509295909350565b5f6020828403121561346d5761346c612e5b565b5b5f61347a848285016130a0565b91505092915050565b5f6020828403121561349857613497612e5b565b5b5f82013567ffffffffffffffff8111156134b5576134b4612e5f565b5b6134c184828501612f72565b91505092915050565b5f60ff82169050919050565b6134df816134ca565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61351781613079565b82525050565b5f613528838361350e565b60208301905092915050565b5f602082019050919050565b5f61354a826134e5565b61355481856134ef565b935061355f836134ff565b805f5b8381101561358f578151613576888261351d565b975061358183613534565b925050600181019050613562565b5085935050505092915050565b6135a581612f9f565b82525050565b5f60a083015f8301516135c05f8601826134d6565b50602083015184820360208601526135d88282613540565b91505060408301516135ed604086018261350e565b506060830151613600606086018261359c565b506080830151613613608086018261359c565b508091505092915050565b5f6020820190508181035f83015261363681846135ab565b905092915050565b5f805f805f6080868803121561365757613656612e5b565b5b5f86013567ffffffffffffffff81111561367457613673612e5f565b5b61368088828901612f72565b955050602061369188828901612fbe565b94505060406136a288828901612fbe565b935050606086013567ffffffffffffffff8111156136c3576136c2612e5f565b5b6136cf88828901612fda565b92509250509295509295909350565b6136e781613079565b82525050565b5f6020820190506137005f8301846136de565b92915050565b5f805f805f805f805f6101008a8c03121561372457613723612e5b565b5b5f8a013567ffffffffffffffff81111561374157613740612e5f565b5b61374d8c828d01612f72565b995050602061375e8c828d01612fbe565b985050604061376f8c828d01612fbe565b97505060606137808c828d01612fbe565b96505060806137918c828d016130a0565b95505060a08a013567ffffffffffffffff8111156137b2576137b1612e5f565b5b6137be8c828d0161311c565b94505060c08a013567ffffffffffffffff8111156137df576137de612e5f565b5b6137eb8c828d0161331a565b93505060e08a013567ffffffffffffffff81111561380c5761380b612e5f565b5b6138188c828d01613347565b92509250509295985092959850929598565b5f81519050919050565b5f81905092915050565b5f5b8381101561385b578082015181840152602081019050613840565b5f8484015250505050565b5f6138708261382a565b61387a8185613834565b935061388a81856020860161383e565b80840191505092915050565b5f6138a18284613866565b915081905092915050565b5f82825260208201905092915050565b7f626574206973206e6f74206c69766500000000000000000000000000000000005f82015250565b5f6138f0600f836138ac565b91506138fb826138bc565b602082019050919050565b5f6020820190508181035f83015261391d816138e4565b9050919050565b7f62657420686173206e6f74207965742065787069726564203a20626c6f636b2e5f8201527f74696d657374616d705b00000000000000000000000000000000000000000000602082015250565b5f61397e602a83613834565b915061398982613924565b602a82019050919050565b7f5d2065787069726174696f6e5b00000000000000000000000000000000000000815250565b7f5d00000000000000000000000000000000000000000000000000000000000000815250565b5f6139ea82613972565b91506139f68285613866565b9150613a0182613994565b600d82019150613a118284613866565b9150613a1c826139ba565b6001820191508190509392505050565b5f613a368261382a565b613a4081856138ac565b9350613a5081856020860161383e565b613a5981612e6b565b840191505092915050565b5f6020820190508181035f830152613a7c8184613a2c565b905092915050565b7f696e76616c6964206d6f64657261746f72206e6f6e63650000000000000000005f82015250565b5f613ab86017836138ac565b9150613ac382613a84565b602082019050919050565b5f6020820190508181035f830152613ae581613aac565b9050919050565b5f6060820190508181035f830152613b048186613a2c565b9050613b1360208301856136de565b613b20604083018461325f565b949350505050565b7f696e76616c6964206d6f64657261746f72207369676e617475726500000000005f82015250565b5f613b5c601b836138ac565b9150613b6782613b28565b602082019050919050565b5f6020820190508181035f830152613b8981613b50565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f77696e6e65722061646472657373206973206e6f7420612070617274696369705f8201527f616e740000000000000000000000000000000000000000000000000000000000602082015250565b5f613c176023836138ac565b9150613c2282613bbd565b604082019050919050565b5f6020820190508181035f830152613c4481613c0b565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f613c8282612f9f565b9150613c8d83612f9f565b9250828202613c9b81612f9f565b91508282048414831517613cb257613cb1613c4b565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f613cf082612f9f565b9150613cfb83612f9f565b925082613d0b57613d0a613cb9565b5b828204905092915050565b5f613d2082612f9f565b9150613d2b83612f9f565b9250828201905080821115613d4357613d42613c4b565b5b92915050565b5f613d5382612f9f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613d8557613d84613c4b565b5b600182019050919050565b7f20686173206265656e207265636f6e63696c6564000000000000000000000000815250565b5f613dc18284613866565b9150613dcc82613d90565b60148201915081905092915050565b5f613de582612f9f565b9150613df083612f9f565b9250828203905081811115613e0857613e07613c4b565b5b92915050565b7f20686173206265656e2063616e63656c6c6564206279206f776e657200000000815250565b5f613e3f8284613866565b9150613e4a82613e0e565b601c8201915081905092915050565b7f696e76616c6964206e756d626572206f66207369676e617475726573206f72205f8201527f6e6f6e6365730000000000000000000000000000000000000000000000000000602082015250565b5f613eb36026836138ac565b9150613ebe82613e59565b604082019050919050565b5f6020820190508181035f830152613ee081613ea7565b9050919050565b5f80fd5b5f80fd5b5f80fd5b5f8083356001602003843603038112613f0f57613f0e613ee7565b5b80840192508235915067ffffffffffffffff821115613f3157613f30613eeb565b5b602083019250600182023603831315613f4d57613f4c613eef565b5b509250929050565b7f5d2068617320616e20696e76616c6964206e6f6e636500000000000000000000815250565b5f613f868284613866565b9150613f9182613f55565b60168201915081905092915050565b7f206164647265737320646f65736e2774206d61746368207369676e6174757265815250565b5f613fd18284613866565b9150613fdc82613fa0565b60208201915081905092915050565b7f20686173206265656e2063616e63656c6c656420627920616c6c2070617274695f8201527f636970616e747300000000000000000000000000000000000000000000000000602082015250565b5f614045602783613834565b915061405082613feb565b602782019050919050565b5f6140668284613866565b915061407182614039565b915081905092915050565b7f62657420696420646f6573206e6f7420657869737400000000000000000000005f82015250565b5f6140b06015836138ac565b91506140bb8261407c565b602082019050919050565b5f6020820190508181035f8301526140dd816140a4565b9050919050565b7f6e6f7420656e6f7567682062616c616e636500000000000000000000000000005f82015250565b5f6141186012836138ac565b9150614123826140e4565b602082019050919050565b5f6020820190508181035f8301526141458161410c565b9050919050565b7f77697468647261775b0000000000000000000000000000000000000000000000815250565b7f5d20616d6f756e745b0000000000000000000000000000000000000000000000815250565b5f6141a28261414c565b6009820191506141b28285613866565b91506141bd82614172565b6009820191506141cd8284613866565b91506141d8826139ba565b6001820191508190509392505050565b7f20686173206265656e2063616e63656c6c6564206279206d6f64657261746f72815250565b5f6142198284613866565b9150614224826141e8565b60208201915081905092915050565b7f647261696e5b0000000000000000000000000000000000000000000000000000815250565b5f61426382614233565b6006820191506142738285613866565b915061427e82614172565b60098201915061428e8284613866565b9150614299826139ba565b6001820191508190509392505050565b7f62657420696420616c72656164792065786973747300000000000000000000005f82015250565b5f6142dd6015836138ac565b91506142e8826142a9565b602082019050919050565b5f6020820190508181035f83015261430a816142d1565b9050919050565b7f2068617320616e20696e73756666696369656e742062616c616e636500000000815250565b5f6143428284613866565b915061434d82614311565b601c8201915081905092915050565b7f2068617320616e20696e76616c6964206e6f6e63650000000000000000000000815250565b5f61438d8284613866565b91506143988261435c565b60158201915081905092915050565b7f20686173206265656e20616464656420746f207468652073797374656d000000815250565b5f6143d88284613866565b91506143e3826143a7565b601d8201915081905092915050565b7f6465706f7369745b000000000000000000000000000000000000000000000000815250565b7f5d2062616c616e63655b00000000000000000000000000000000000000000000815250565b5f614448826143f2565b6008820191506144588285613866565b915061446382614418565b600a820191506144738284613866565b915061447e826139ba565b6001820191508190509392505050565b7f62657473206d6179206f6e6c792062652063616e63656c65642033302b2064615f8201527f79732061667465722065787069726174696f6e00000000000000000000000000602082015250565b5f6144e86033836138ac565b91506144f38261448e565b604082019050919050565b5f6020820190508181035f830152614515816144dc565b9050919050565b7f63616e63656c6572206973206e6f7420617574686f72697a656420746f2063615f8201527f6e63656c20746869732062657400000000000000000000000000000000000000602082015250565b5f614576602d836138ac565b91506145818261451c565b604082019050919050565b5f6020820190508181035f8301526145a38161456a565b9050919050565b7f20686173206265656e2063616e63656c6c656420627920000000000000000000815250565b7f2073696e63652065787069726564000000000000000000000000000000000000815250565b5f6146018285613866565b915061460c826145aa565b60178201915061461c8284613866565b9150614627826145d0565b600e820191508190509392505050565b5f614641826134ca565b915061464c836134ca565b9250828201905060ff81111561466557614664613c4b565b5b92915050565b5f81519050919050565b5f81905092915050565b5f6146898261466b565b6146938185614675565b93506146a381856020860161383e565b80840191505092915050565b5f819050919050565b5f819050919050565b6146d26146cd826146af565b6146b8565b82525050565b5f6146e3828561467f565b91506146ef82846146c1565b6020820191508190509392505050565b5f80fd5b5f80fd5b5f808585111561471a576147196146ff565b5b8386111561472b5761472a614703565b5b6001850283019150848603905094509492505050565b5f82905092915050565b5f82821b905092915050565b5f6147628383614741565b8261476d81356146af565b925060208210156147ad576147a87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8360200360080261474b565b831692505b505092915050565b6147be816146af565b82525050565b6147cd816134ca565b82525050565b5f6080820190506147e65f8301876147b5565b6147f360208301866147c4565b61480060408301856147b5565b61480d60608301846147b5565b95945050505050565b5f8160011c9050919050565b5f808291508390505b600185111561486b5780860481111561484757614846613c4b565b5b60018516156148565780820291505b808102905061486485614816565b945061482b565b94509492505050565b5f82614883576001905061493e565b81614890575f905061493e565b81600181146148a657600281146148b0576148df565b600191505061493e565b60ff8411156148c2576148c1613c4b565b5b8360020a9150848211156148d9576148d8613c4b565b5b5061493e565b5060208310610133831016604e8410600b84101617156149145782820a90508381111561490f5761490e613c4b565b5b61493e565b6149218484846001614822565b9250905081840481111561493857614937613c4b565b5b81810290505b9392505050565b5f61494f82612f9f565b915061495a83612f9f565b92506149877fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484614874565b905092915050565b5f614999826134ca565b91506149a4836134ca565b9250826149b4576149b3613cb9565b5b828204905092915050565b5f6149c9826134ca565b91506149d4836134ca565b92508282026149e2816134ca565b91508082146149f4576149f3613c4b565b5b5092915050565b5f614a05826134ca565b9150614a10836134ca565b9250828203905060ff811115614a2957614a28613c4b565b5b9291505056fea2646970667358221220377224e7a848b5c4b74c256294ce18c1e366ce51b0932b1e95d4c5d0270f0c8c64736f6c63430008190033",
}

// BookABI is the input ABI used to generate the binding from.
// Deprecated: Use BookMetaData.ABI instead.
var BookABI = BookMetaData.ABI

// BookBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BookMetaData.Bin instead.
var BookBin = BookMetaData.Bin

// DeployBook deploys a new Ethereum contract, binding an instance of Book to it.
func DeployBook(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Book, error) {
	parsed, err := BookMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BookBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Book{BookCaller: BookCaller{contract: contract}, BookTransactor: BookTransactor{contract: contract}, BookFilterer: BookFilterer{contract: contract}}, nil
}

// Book is an auto generated Go binding around an Ethereum contract.
type Book struct {
	BookCaller     // Read-only binding to the contract
	BookTransactor // Write-only binding to the contract
	BookFilterer   // Log filterer for contract events
}

// BookCaller is an auto generated read-only Go binding around an Ethereum contract.
type BookCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BookTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BookTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BookFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BookFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BookSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BookSession struct {
	Contract     *Book             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BookCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BookCallerSession struct {
	Contract *BookCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BookTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BookTransactorSession struct {
	Contract     *BookTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BookRaw is an auto generated low-level Go binding around an Ethereum contract.
type BookRaw struct {
	Contract *Book // Generic contract binding to access the raw methods on
}

// BookCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BookCallerRaw struct {
	Contract *BookCaller // Generic read-only contract binding to access the raw methods on
}

// BookTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BookTransactorRaw struct {
	Contract *BookTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBook creates a new instance of Book, bound to a specific deployed contract.
func NewBook(address common.Address, backend bind.ContractBackend) (*Book, error) {
	contract, err := bindBook(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Book{BookCaller: BookCaller{contract: contract}, BookTransactor: BookTransactor{contract: contract}, BookFilterer: BookFilterer{contract: contract}}, nil
}

// NewBookCaller creates a new read-only instance of Book, bound to a specific deployed contract.
func NewBookCaller(address common.Address, caller bind.ContractCaller) (*BookCaller, error) {
	contract, err := bindBook(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BookCaller{contract: contract}, nil
}

// NewBookTransactor creates a new write-only instance of Book, bound to a specific deployed contract.
func NewBookTransactor(address common.Address, transactor bind.ContractTransactor) (*BookTransactor, error) {
	contract, err := bindBook(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BookTransactor{contract: contract}, nil
}

// NewBookFilterer creates a new log filterer instance of Book, bound to a specific deployed contract.
func NewBookFilterer(address common.Address, filterer bind.ContractFilterer) (*BookFilterer, error) {
	contract, err := bindBook(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BookFilterer{contract: contract}, nil
}

// bindBook binds a generic wrapper to an already deployed contract.
func bindBook(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BookMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Book *BookRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Book.Contract.BookCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Book *BookRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Book.Contract.BookTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Book *BookRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Book.Contract.BookTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Book *BookCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Book.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Book *BookTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Book.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Book *BookTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Book.Contract.contract.Transact(opts, method, params...)
}

// AccountBalance is a free data retrieval call binding the contract method 0xe63f341f.
//
// Solidity: function AccountBalance(address account) view returns(uint256)
func (_Book *BookCaller) AccountBalance(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Book.contract.Call(opts, &out, "AccountBalance", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AccountBalance is a free data retrieval call binding the contract method 0xe63f341f.
//
// Solidity: function AccountBalance(address account) view returns(uint256)
func (_Book *BookSession) AccountBalance(account common.Address) (*big.Int, error) {
	return _Book.Contract.AccountBalance(&_Book.CallOpts, account)
}

// AccountBalance is a free data retrieval call binding the contract method 0xe63f341f.
//
// Solidity: function AccountBalance(address account) view returns(uint256)
func (_Book *BookCallerSession) AccountBalance(account common.Address) (*big.Int, error) {
	return _Book.Contract.AccountBalance(&_Book.CallOpts, account)
}

// Balance is a free data retrieval call binding the contract method 0x0ef67887.
//
// Solidity: function Balance() view returns(uint256)
func (_Book *BookCaller) Balance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Book.contract.Call(opts, &out, "Balance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Balance is a free data retrieval call binding the contract method 0x0ef67887.
//
// Solidity: function Balance() view returns(uint256)
func (_Book *BookSession) Balance() (*big.Int, error) {
	return _Book.Contract.Balance(&_Book.CallOpts)
}

// Balance is a free data retrieval call binding the contract method 0x0ef67887.
//
// Solidity: function Balance() view returns(uint256)
func (_Book *BookCallerSession) Balance() (*big.Int, error) {
	return _Book.Contract.Balance(&_Book.CallOpts)
}

// BetDetails is a free data retrieval call binding the contract method 0x364529e5.
//
// Solidity: function BetDetails(string betID) view returns((uint8,address[],address,uint256,uint256))
func (_Book *BookCaller) BetDetails(opts *bind.CallOpts, betID string) (BookBetInfo, error) {
	var out []interface{}
	err := _Book.contract.Call(opts, &out, "BetDetails", betID)

	if err != nil {
		return *new(BookBetInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(BookBetInfo)).(*BookBetInfo)

	return out0, err

}

// BetDetails is a free data retrieval call binding the contract method 0x364529e5.
//
// Solidity: function BetDetails(string betID) view returns((uint8,address[],address,uint256,uint256))
func (_Book *BookSession) BetDetails(betID string) (BookBetInfo, error) {
	return _Book.Contract.BetDetails(&_Book.CallOpts, betID)
}

// BetDetails is a free data retrieval call binding the contract method 0x364529e5.
//
// Solidity: function BetDetails(string betID) view returns((uint8,address[],address,uint256,uint256))
func (_Book *BookCallerSession) BetDetails(betID string) (BookBetInfo, error) {
	return _Book.Contract.BetDetails(&_Book.CallOpts, betID)
}

// Nonce is a free data retrieval call binding the contract method 0x30d0cee9.
//
// Solidity: function Nonce(address account) view returns(uint256)
func (_Book *BookCaller) Nonce(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Book.contract.Call(opts, &out, "Nonce", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonce is a free data retrieval call binding the contract method 0x30d0cee9.
//
// Solidity: function Nonce(address account) view returns(uint256)
func (_Book *BookSession) Nonce(account common.Address) (*big.Int, error) {
	return _Book.Contract.Nonce(&_Book.CallOpts, account)
}

// Nonce is a free data retrieval call binding the contract method 0x30d0cee9.
//
// Solidity: function Nonce(address account) view returns(uint256)
func (_Book *BookCallerSession) Nonce(account common.Address) (*big.Int, error) {
	return _Book.Contract.Nonce(&_Book.CallOpts, account)
}

// Owner is a free data retrieval call binding the contract method 0xb4a99a4e.
//
// Solidity: function Owner() view returns(address)
func (_Book *BookCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Book.contract.Call(opts, &out, "Owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0xb4a99a4e.
//
// Solidity: function Owner() view returns(address)
func (_Book *BookSession) Owner() (common.Address, error) {
	return _Book.Contract.Owner(&_Book.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0xb4a99a4e.
//
// Solidity: function Owner() view returns(address)
func (_Book *BookCallerSession) Owner() (common.Address, error) {
	return _Book.Contract.Owner(&_Book.CallOpts)
}

// CancelBetExpired is a paid mutator transaction binding the contract method 0xf8856b88.
//
// Solidity: function CancelBetExpired(string betID) returns()
func (_Book *BookTransactor) CancelBetExpired(opts *bind.TransactOpts, betID string) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "CancelBetExpired", betID)
}

// CancelBetExpired is a paid mutator transaction binding the contract method 0xf8856b88.
//
// Solidity: function CancelBetExpired(string betID) returns()
func (_Book *BookSession) CancelBetExpired(betID string) (*types.Transaction, error) {
	return _Book.Contract.CancelBetExpired(&_Book.TransactOpts, betID)
}

// CancelBetExpired is a paid mutator transaction binding the contract method 0xf8856b88.
//
// Solidity: function CancelBetExpired(string betID) returns()
func (_Book *BookTransactorSession) CancelBetExpired(betID string) (*types.Transaction, error) {
	return _Book.Contract.CancelBetExpired(&_Book.TransactOpts, betID)
}

// CancelBetModerator is a paid mutator transaction binding the contract method 0x7c64ce36.
//
// Solidity: function CancelBetModerator(string betID, uint256 amountFeeWei, uint256 nonce, bytes signature) returns()
func (_Book *BookTransactor) CancelBetModerator(opts *bind.TransactOpts, betID string, amountFeeWei *big.Int, nonce *big.Int, signature []byte) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "CancelBetModerator", betID, amountFeeWei, nonce, signature)
}

// CancelBetModerator is a paid mutator transaction binding the contract method 0x7c64ce36.
//
// Solidity: function CancelBetModerator(string betID, uint256 amountFeeWei, uint256 nonce, bytes signature) returns()
func (_Book *BookSession) CancelBetModerator(betID string, amountFeeWei *big.Int, nonce *big.Int, signature []byte) (*types.Transaction, error) {
	return _Book.Contract.CancelBetModerator(&_Book.TransactOpts, betID, amountFeeWei, nonce, signature)
}

// CancelBetModerator is a paid mutator transaction binding the contract method 0x7c64ce36.
//
// Solidity: function CancelBetModerator(string betID, uint256 amountFeeWei, uint256 nonce, bytes signature) returns()
func (_Book *BookTransactorSession) CancelBetModerator(betID string, amountFeeWei *big.Int, nonce *big.Int, signature []byte) (*types.Transaction, error) {
	return _Book.Contract.CancelBetModerator(&_Book.TransactOpts, betID, amountFeeWei, nonce, signature)
}

// CancelBetOwner is a paid mutator transaction binding the contract method 0x0ee216b7.
//
// Solidity: function CancelBetOwner(string betID, uint256 amountFeeWei) returns()
func (_Book *BookTransactor) CancelBetOwner(opts *bind.TransactOpts, betID string, amountFeeWei *big.Int) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "CancelBetOwner", betID, amountFeeWei)
}

// CancelBetOwner is a paid mutator transaction binding the contract method 0x0ee216b7.
//
// Solidity: function CancelBetOwner(string betID, uint256 amountFeeWei) returns()
func (_Book *BookSession) CancelBetOwner(betID string, amountFeeWei *big.Int) (*types.Transaction, error) {
	return _Book.Contract.CancelBetOwner(&_Book.TransactOpts, betID, amountFeeWei)
}

// CancelBetOwner is a paid mutator transaction binding the contract method 0x0ee216b7.
//
// Solidity: function CancelBetOwner(string betID, uint256 amountFeeWei) returns()
func (_Book *BookTransactorSession) CancelBetOwner(betID string, amountFeeWei *big.Int) (*types.Transaction, error) {
	return _Book.Contract.CancelBetOwner(&_Book.TransactOpts, betID, amountFeeWei)
}

// CancelBetParticipants is a paid mutator transaction binding the contract method 0x221da6a5.
//
// Solidity: function CancelBetParticipants(string betID, uint256 amountFeeWei, uint256[] nonces, bytes[] signatures) returns()
func (_Book *BookTransactor) CancelBetParticipants(opts *bind.TransactOpts, betID string, amountFeeWei *big.Int, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "CancelBetParticipants", betID, amountFeeWei, nonces, signatures)
}

// CancelBetParticipants is a paid mutator transaction binding the contract method 0x221da6a5.
//
// Solidity: function CancelBetParticipants(string betID, uint256 amountFeeWei, uint256[] nonces, bytes[] signatures) returns()
func (_Book *BookSession) CancelBetParticipants(betID string, amountFeeWei *big.Int, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Book.Contract.CancelBetParticipants(&_Book.TransactOpts, betID, amountFeeWei, nonces, signatures)
}

// CancelBetParticipants is a paid mutator transaction binding the contract method 0x221da6a5.
//
// Solidity: function CancelBetParticipants(string betID, uint256 amountFeeWei, uint256[] nonces, bytes[] signatures) returns()
func (_Book *BookTransactorSession) CancelBetParticipants(betID string, amountFeeWei *big.Int, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Book.Contract.CancelBetParticipants(&_Book.TransactOpts, betID, amountFeeWei, nonces, signatures)
}

// Deposit is a paid mutator transaction binding the contract method 0xed21248c.
//
// Solidity: function Deposit() payable returns()
func (_Book *BookTransactor) Deposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "Deposit")
}

// Deposit is a paid mutator transaction binding the contract method 0xed21248c.
//
// Solidity: function Deposit() payable returns()
func (_Book *BookSession) Deposit() (*types.Transaction, error) {
	return _Book.Contract.Deposit(&_Book.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xed21248c.
//
// Solidity: function Deposit() payable returns()
func (_Book *BookTransactorSession) Deposit() (*types.Transaction, error) {
	return _Book.Contract.Deposit(&_Book.TransactOpts)
}

// Drain is a paid mutator transaction binding the contract method 0xd67a073f.
//
// Solidity: function Drain() payable returns()
func (_Book *BookTransactor) Drain(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "Drain")
}

// Drain is a paid mutator transaction binding the contract method 0xd67a073f.
//
// Solidity: function Drain() payable returns()
func (_Book *BookSession) Drain() (*types.Transaction, error) {
	return _Book.Contract.Drain(&_Book.TransactOpts)
}

// Drain is a paid mutator transaction binding the contract method 0xd67a073f.
//
// Solidity: function Drain() payable returns()
func (_Book *BookTransactorSession) Drain() (*types.Transaction, error) {
	return _Book.Contract.Drain(&_Book.TransactOpts)
}

// PlaceBet is a paid mutator transaction binding the contract method 0xe2a06aca.
//
// Solidity: function PlaceBet(string betID, uint256 amountBetWei, uint256 amountFeeWei, uint256 expiration, address moderator, address[] participants, uint256[] nonces, bytes[] signatures) returns()
func (_Book *BookTransactor) PlaceBet(opts *bind.TransactOpts, betID string, amountBetWei *big.Int, amountFeeWei *big.Int, expiration *big.Int, moderator common.Address, participants []common.Address, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "PlaceBet", betID, amountBetWei, amountFeeWei, expiration, moderator, participants, nonces, signatures)
}

// PlaceBet is a paid mutator transaction binding the contract method 0xe2a06aca.
//
// Solidity: function PlaceBet(string betID, uint256 amountBetWei, uint256 amountFeeWei, uint256 expiration, address moderator, address[] participants, uint256[] nonces, bytes[] signatures) returns()
func (_Book *BookSession) PlaceBet(betID string, amountBetWei *big.Int, amountFeeWei *big.Int, expiration *big.Int, moderator common.Address, participants []common.Address, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Book.Contract.PlaceBet(&_Book.TransactOpts, betID, amountBetWei, amountFeeWei, expiration, moderator, participants, nonces, signatures)
}

// PlaceBet is a paid mutator transaction binding the contract method 0xe2a06aca.
//
// Solidity: function PlaceBet(string betID, uint256 amountBetWei, uint256 amountFeeWei, uint256 expiration, address moderator, address[] participants, uint256[] nonces, bytes[] signatures) returns()
func (_Book *BookTransactorSession) PlaceBet(betID string, amountBetWei *big.Int, amountFeeWei *big.Int, expiration *big.Int, moderator common.Address, participants []common.Address, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Book.Contract.PlaceBet(&_Book.TransactOpts, betID, amountBetWei, amountFeeWei, expiration, moderator, participants, nonces, signatures)
}

// ReconcileBet is a paid mutator transaction binding the contract method 0x0e302132.
//
// Solidity: function ReconcileBet(string betID, uint256 nonce, bytes signature, address[] winners) returns()
func (_Book *BookTransactor) ReconcileBet(opts *bind.TransactOpts, betID string, nonce *big.Int, signature []byte, winners []common.Address) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "ReconcileBet", betID, nonce, signature, winners)
}

// ReconcileBet is a paid mutator transaction binding the contract method 0x0e302132.
//
// Solidity: function ReconcileBet(string betID, uint256 nonce, bytes signature, address[] winners) returns()
func (_Book *BookSession) ReconcileBet(betID string, nonce *big.Int, signature []byte, winners []common.Address) (*types.Transaction, error) {
	return _Book.Contract.ReconcileBet(&_Book.TransactOpts, betID, nonce, signature, winners)
}

// ReconcileBet is a paid mutator transaction binding the contract method 0x0e302132.
//
// Solidity: function ReconcileBet(string betID, uint256 nonce, bytes signature, address[] winners) returns()
func (_Book *BookTransactorSession) ReconcileBet(betID string, nonce *big.Int, signature []byte, winners []common.Address) (*types.Transaction, error) {
	return _Book.Contract.ReconcileBet(&_Book.TransactOpts, betID, nonce, signature, winners)
}

// Withdraw is a paid mutator transaction binding the contract method 0x57ea89b6.
//
// Solidity: function Withdraw() payable returns()
func (_Book *BookTransactor) Withdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "Withdraw")
}

// Withdraw is a paid mutator transaction binding the contract method 0x57ea89b6.
//
// Solidity: function Withdraw() payable returns()
func (_Book *BookSession) Withdraw() (*types.Transaction, error) {
	return _Book.Contract.Withdraw(&_Book.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x57ea89b6.
//
// Solidity: function Withdraw() payable returns()
func (_Book *BookTransactorSession) Withdraw() (*types.Transaction, error) {
	return _Book.Contract.Withdraw(&_Book.TransactOpts)
}

// BookEventLogIterator is returned from FilterEventLog and is used to iterate over the raw logs and unpacked data for EventLog events raised by the Book contract.
type BookEventLogIterator struct {
	Event *BookEventLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BookEventLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BookEventLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BookEventLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BookEventLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BookEventLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BookEventLog represents a EventLog event raised by the Book contract.
type BookEventLog struct {
	Value string
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterEventLog is a free log retrieval operation binding the contract event 0xd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a.
//
// Solidity: event EventLog(string value)
func (_Book *BookFilterer) FilterEventLog(opts *bind.FilterOpts) (*BookEventLogIterator, error) {

	logs, sub, err := _Book.contract.FilterLogs(opts, "EventLog")
	if err != nil {
		return nil, err
	}
	return &BookEventLogIterator{contract: _Book.contract, event: "EventLog", logs: logs, sub: sub}, nil
}

// WatchEventLog is a free log subscription operation binding the contract event 0xd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a.
//
// Solidity: event EventLog(string value)
func (_Book *BookFilterer) WatchEventLog(opts *bind.WatchOpts, sink chan<- *BookEventLog) (event.Subscription, error) {

	logs, sub, err := _Book.contract.WatchLogs(opts, "EventLog")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BookEventLog)
				if err := _Book.contract.UnpackLog(event, "EventLog", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEventLog is a log parse operation binding the contract event 0xd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a.
//
// Solidity: event EventLog(string value)
func (_Book *BookFilterer) ParseEventLog(log types.Log) (*BookEventLog, error) {
	event := new(BookEventLog)
	if err := _Book.contract.UnpackLog(event, "EventLog", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
