// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package book

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// BookBetInfo is an auto generated low-level Go binding around an user-defined struct.
type BookBetInfo struct {
	State        uint8
	Participants []common.Address
	Moderator    common.Address
	AmountBetWei *big.Int
	Expiration   *big.Int
}

// BookMetaData contains all meta data concerning the Book contract.
var BookMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"EventLog\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"}],\"name\":\"BetDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"State\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"Participants\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"Moderator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"AmountBetWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Expiration\",\"type\":\"uint256\"}],\"internalType\":\"structBook.BetInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"}],\"name\":\"CancelBetExpired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amountFeeWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"CancelBetModerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amountFeeWei\",\"type\":\"uint256\"}],\"name\":\"CancelBetOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amountFeeWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"nonces\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"CancelBetParticipants\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Drain\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amountBetWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountFeeWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"moderator\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"participants\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nonces\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"PlaceBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"betID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"}],\"name\":\"ReconcileBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x6080604052348015600e575f5ffd5b50335f5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550614a718061005b5f395ff3fe6080604052600436106100dc575f3560e01c80637c64ce361161007e578063e2a06aca11610058578063e2a06aca14610260578063e63f341f14610288578063ed21248c146102c4578063f8856b88146102ce576100dc565b80637c64ce3614610204578063b4a99a4e1461022c578063d67a073f14610256576100dc565b8063221da6a5116100ba578063221da6a51461015a57806330d0cee914610182578063364529e5146101be57806357ea89b6146101fa576100dc565b80630e302132146100e05780630ee216b7146101085780630ef6788714610130575b5f5ffd5b3480156100eb575f5ffd5b506101066004803603810190610101919061316f565b6102f6565b005b348015610113575f5ffd5b5061012e6004803603810190610129919061322b565b6108ab565b005b34801561013b575f5ffd5b50610144610b46565b6040516101519190613294565b60405180910390f35b348015610165575f5ffd5b50610180600480360381019061017b91906133c2565b610b8d565b005b34801561018d575f5ffd5b506101a860048036038101906101a3919061347e565b611167565b6040516101b59190613294565b60405180910390f35b3480156101c9575f5ffd5b506101e460048036038101906101df91906134a9565b611207565b6040516101f19190613644565b60405180910390f35b61020261141d565b005b34801561020f575f5ffd5b5061022a60048036038101906102259190613664565b6115ad565b005b348015610237575f5ffd5b50610240611ab0565b60405161024d9190613713565b60405180910390f35b61025e611ad4565b005b34801561026b575f5ffd5b506102866004803603810190610281919061372c565b611be3565b005b348015610293575f5ffd5b506102ae60048036038101906102a9919061347e565b6123cb565b6040516102bb9190613294565b60405180910390f35b6102cc61246b565b005b3480156102d9575f5ffd5b506102f460048036038101906102ef91906134a9565b61256b565b005b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461034d575f5ffd5b5f60028660405161035e91906138a2565b90815260200160405180910390209050600160ff16815f015f015f9054906101000a900460ff1660ff16146103c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103bf90613912565b60405180910390fd5b805f016004015442101561044a576103df42612814565b6103ee825f0160040154612814565b6040516020016103ff9291906139ec565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104419190613a70565b60405180910390fd5b8460015f835f016002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060020154146104f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e890613ada565b60405180910390fd5b5f86825f016002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff168760405160200161052c93929190613af8565b6040516020818303038152906040528051906020012090505f5f610551838888612992565b91509150805f01511561059f5780602001516040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105969190613a70565b60405180910390fd5b835f016002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610632576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062990613b7e565b60405180910390fd5b5f5f90505b85518110156106f257846005015f87838151811061065857610657613b9c565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff166106e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106dc90613c39565b60405180910390fd5b8080600101915050610637565b505f6002855f01600301546107079190613c84565b90505f8651826107179190613cf2565b90505f5f90505b87518110156107a4578160015f8a848151811061073e5761073d613b9c565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001015f8282546107909190613d22565b92505081905550808060010191505061071e565b5060015f875f016002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206002015f81548092919061081a90613d55565b91905055506002865f015f015f6101000a81548160ff021916908360ff1602179055505f865f01600301819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a8b60405160200161087a9190613dc2565b6040516020818303038152906040526040516108969190613a70565b60405180910390a15050505050505050505050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610902575f5ffd5b5f60028360405161091391906138a2565b90815260200160405180910390209050600160ff16815f015f015f9054906101000a900460ff1660ff161461097d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097490613912565b60405180910390fd5b5f82825f01600301546109909190613de7565b90505f5f90505b825f0160010180549050811015610ac0578160015f855f0160010184815481106109c4576109c3613b9c565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001015f828254610a369190613d22565b925050819055508360015f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001015f828254610aac9190613d22565b925050819055508080600101915050610997565b506003825f015f015f6101000a81548160ff021916908360ff1602179055505f825f01600301819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a84604051602001610b1c9190613e40565b604051602081830303815290604052604051610b389190613a70565b60405180910390a150505050565b5f60015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010154905090565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610be4575f5ffd5b5f600286604051610bf591906138a2565b90815260200160405180910390209050600160ff16815f015f015f9054906101000a900460ff1660ff1614610c5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5690613912565b60405180910390fd5b82829050815f0160010180549050141580610c8457508351815f016001018054905014155b15610cc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbb90613ed5565b60405180910390fd5b5f5f90505b815f0160010180549050811015610f9a575f825f016001018281548110610cf357610cf2613b9c565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f868381518110610d3157610d30613b9c565b5b60200260200101519050365f878786818110610d5057610d4f613b9c565b5b9050602002810190610d629190613eff565b915091508260015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206002015414610e1157610db684612b20565b604051602001610dc69190613f87565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e089190613a70565b60405180910390fd5b5f8b8585604051602001610e2793929190613af8565b6040516020818303038152906040528051906020012090505f5f610e4c838686612992565b91509150805f015115610e9a5780602001516040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e919190613a70565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610f3157610ed687612b20565b604051602001610ee69190613fd2565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f289190613a70565b60405180910390fd5b60015f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206002015f815480929190610f8190613d55565b9190505550505050505050508080600101915050610cc9565b505f85825f0160030154610fae9190613de7565b90505f5f90505b825f01600101805490508110156110de578160015f855f016001018481548110610fe257610fe1613b9c565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001015f8282546110549190613d22565b925050819055508660015f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001015f8282546110ca9190613d22565b925050819055508080600101915050610fb5565b506003825f015f015f6101000a81548160ff021916908360ff1602179055505f825f01600301819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a8760405160200161113a9190614067565b6040516020818303038152906040526040516111569190613a70565b60405180910390a150505050505050565b5f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111bf575f5ffd5b60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20600201549050919050565b61120f612d77565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611266575f5ffd5b5f60ff1660028360405161127a91906138a2565b90815260200160405180910390205f015f015f9054906101000a900460ff1660ff16036112dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d3906140d2565b60405180910390fd5b6002826040516112ec91906138a2565b90815260200160405180910390205f016040518060a00160405290815f82015f9054906101000a900460ff1660ff1660ff168152602001600182018054806020026020016040519081016040528092919081815260200182805480156113a457602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161135b575b50505050508152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820154815250509050919050565b5f3390505f60015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001015490505f81036114a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149e9061413a565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f193505050501580156114ea573d5f5f3e3d5ffd5b508060015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001015f82825461153a9190613de7565b925050819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a61156b33612b20565b61157483612814565b6040516020016115859291906141a4565b6040516020818303038152906040526040516115a19190613a70565b60405180910390a15050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611604575f5ffd5b5f60028660405161161591906138a2565b90815260200160405180910390209050600160ff16815f015f015f9054906101000a900460ff1660ff161461167f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167690613912565b60405180910390fd5b8360015f835f016002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206002015414611726576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171d90613ada565b60405180910390fd5b5f86825f016002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660405160200161176193929190613af8565b6040516020818303038152906040528051906020012090505f5f611786838787612992565b91509150805f0151156117d45780602001516040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117cb9190613a70565b60405180910390fd5b835f016002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611867576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185e90613b7e565b60405180910390fd5b5f88855f016003015461187a9190613de7565b90505f5f90505b855f01600101805490508110156119aa578160015f885f0160010184815481106118ae576118ad613b9c565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001015f8282546119209190613d22565b925050819055508960015f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001015f8282546119969190613d22565b925050819055508080600101915050611881565b5060015f865f016002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206002015f815480929190611a2090613d55565b91905055506003855f015f015f6101000a81548160ff021916908360ff1602179055505f855f01600301819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a8a604051602001611a80919061421a565b604051602081830303815290604052604051611a9c9190613a70565b60405180910390a150505050505050505050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b2b575f5ffd5b5f3390505f4790508173ffffffffffffffffffffffffffffffffffffffff166108fc8290811502906040515f60405180830381858888f19350505050158015611b76573d5f5f3e3d5ffd5b507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a611ba183612b20565b611baa83612814565b604051602001611bbb929190614265565b604051602081830303815290604052604051611bd79190613a70565b60405180910390a15050565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611c3a575f5ffd5b5f60ff1660028a604051611c4e91906138a2565b90815260200160405180910390205f015f015f9054906101000a900460ff1660ff1614611cb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ca7906142ff565b60405180910390fd5b5f8789611cbd9190613d22565b90505f5f90505b8551811015611fbf575f868281518110611ce157611ce0613b9c565b5b602002602001015190505f868381518110611cff57611cfe613b9c565b5b60200260200101519050365f878786818110611d1e57611d1d613b9c565b5b9050602002810190611d309190613eff565b915091508560015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20600101541015611de057611d8584612b20565b604051602001611d959190614343565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dd79190613a70565b60405180910390fd5b8260015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206002015414611e8b57611e3084612b20565b604051602001611e40919061438e565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e829190613a70565b60405180910390fd5b5f8f8585604051602001611ea193929190613af8565b6040516020818303038152906040528051906020012090505f5f611ec6838686612992565b91509150805f015115611f145780602001516040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0b9190613a70565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611fab57611f5087612b20565b604051602001611f609190613fd2565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fa29190613a70565b60405180910390fd5b505050505050508080600101915050611cc4565b506040518060a00160405280600160ff1681526020018681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018a81526020018881525060028b60405161201191906138a2565b90815260200160405180910390205f015f820151815f015f6101000a81548160ff021916908360ff160217905550602082015181600101908051906020019061205b929190612dbb565b506040820151816002015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030155608082015181600401559050505f5f90505b8551811015612288575f8682815181106120db576120da613b9c565b5b602002602001015190508260015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001015f8282546121349190613de7565b9250508190555060015f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206002015f81548092919061218b90613d55565b91905055508960015f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001015f8282546121ff9190613d22565b92505081905550600160028d60405161221891906138a2565b90815260200160405180910390206005015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055505080806001019150506120be565b5060015f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f015f9054906101000a900460ff166123695760405180606001604052806001151581526020015f81526020015f81525060015f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f015f6101000a81548160ff02191690831515021790555060208201518160010155604082015181600201559050505b7fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a8a60405160200161239b91906143d9565b6040516020818303038152906040526040516123b79190613a70565b60405180910390a150505050505050505050565b5f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612423575f5ffd5b60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20600101549050919050565b3460015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001015f8282546124ba9190613d22565b925050819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a6124eb33612b20565b61253460015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010154612814565b60405160200161254592919061444a565b6040516020818303038152906040526040516125619190613a70565b60405180910390a1565b5f60028260405161257c91906138a2565b90815260200160405180910390209050600160ff16815f015f015f9054906101000a900460ff1660ff16146125e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125dd90613912565b60405180910390fd5b62278d00815f01600401546125fb9190613d22565b42101561263d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126349061450a565b60405180910390fd5b806005015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff166126c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126bf90614598565b60405180910390fd5b5f5f90505b815f016001018054905081101561278657815f016003015460015f845f016001018481548110612700576126ff613b9c565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206001015f8282546127729190613d22565b9250508190555080806001019150506126cd565b506003815f015f015f6101000a81548160ff021916908360ff1602179055505f815f01600301819055507fd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a826127db33612b20565b6040516020016127ec929190614602565b6040516020818303038152906040526040516128089190613a70565b60405180910390a15050565b60605f820361285a576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061298d565b5f8290505f5b5f821461288957808061287290613d55565b915050600a826128829190613cf2565b9150612860565b5f8167ffffffffffffffff8111156128a4576128a3612ea1565b5b6040519080825280601f01601f1916602001820160405280156128d65781602001600182028036833780820191505090505b5090505f8290505b5f8614612985576001816128f29190613de7565b90505f600a80886129039190613cf2565b61290d9190613c84565b876129189190613de7565b60306129249190614643565b90505f8160f81b90508084848151811061294157612940613b9c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350600a8861297c9190613cf2565b975050506128de565b819450505050505b919050565b5f61299b612e42565b604184849050146129ee575f6129e56040518060400160405280601881526020017f696e76616c6964207369676e6174757265206c656e6774680000000000000000815250612cd9565b91509150612b18565b5f6040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a33320000000081525090505f8187604051602001612a3b9291906146e4565b6040516020818303038152906040528051906020012090505f86865f90602092612a6793929190614713565b90612a729190614763565b90505f8787602090604092612a8993929190614713565b90612a949190614763565b90505f88886040818110612aab57612aaa613b9c565b5b9050013560f81c60f81b60f81c90506001848285856040515f8152602001604052604051612adc94939291906147df565b6020604051602081039080840390855afa158015612afc573d5f5f3e3d5ffd5b50505060206040510351612b0e612d00565b9650965050505050505b935093915050565b60605f602867ffffffffffffffff811115612b3e57612b3d612ea1565b5b6040519080825280601f01601f191660200182016040528015612b705781602001600182028036833780820191505090505b5090505f5f90505b6014811015612ccf575f816013612b8f9190613de7565b6008612b9b9190613c84565b6002612ba79190614951565b8573ffffffffffffffffffffffffffffffffffffffff16612bc89190613cf2565b60f81b90505f60108260f81c612bde919061499b565b60f81b90505f8160f81c6010612bf491906149cb565b8360f81c612c029190614a07565b60f81b9050612c1082612d32565b85856002612c1e9190613c84565b81518110612c2f57612c2e613b9c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350612c6681612d32565b856001866002612c769190613c84565b612c809190613d22565b81518110612c9157612c90613b9c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a9053505050508080600101915050612b78565b5080915050919050565b612ce1612e42565b6040518060400160405280600115158152602001838152509050919050565b612d08612e42565b60405180604001604052805f1515815260200160405180602001604052805f815250815250905090565b5f600a8260f81c60ff161015612d5c5760308260f81c612d529190614643565b60f81b9050612d72565b60578260f81c612d6c9190614643565b60f81b90505b919050565b6040518060a001604052805f60ff168152602001606081526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f81525090565b828054828255905f5260205f20908101928215612e31579160200282015b82811115612e30578251825f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612dd9565b5b509050612e3e9190612e5d565b5090565b60405180604001604052805f15158152602001606081525090565b5b80821115612e74575f815f905550600101612e5e565b5090565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b612ed782612e91565b810181811067ffffffffffffffff82111715612ef657612ef5612ea1565b5b80604052505050565b5f612f08612e78565b9050612f148282612ece565b919050565b5f67ffffffffffffffff821115612f3357612f32612ea1565b5b612f3c82612e91565b9050602081019050919050565b828183375f83830152505050565b5f612f69612f6484612f19565b612eff565b905082815260208101848484011115612f8557612f84612e8d565b5b612f90848285612f49565b509392505050565b5f82601f830112612fac57612fab612e89565b5b8135612fbc848260208601612f57565b91505092915050565b5f819050919050565b612fd781612fc5565b8114612fe1575f5ffd5b50565b5f81359050612ff281612fce565b92915050565b5f5ffd5b5f5ffd5b5f5f83601f84011261301557613014612e89565b5b8235905067ffffffffffffffff81111561303257613031612ff8565b5b60208301915083600182028301111561304e5761304d612ffc565b5b9250929050565b5f67ffffffffffffffff82111561306f5761306e612ea1565b5b602082029050602081019050919050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6130a982613080565b9050919050565b6130b98161309f565b81146130c3575f5ffd5b50565b5f813590506130d4816130b0565b92915050565b5f6130ec6130e784613055565b612eff565b9050808382526020820190506020840283018581111561310f5761310e612ffc565b5b835b81811015613138578061312488826130c6565b845260208401935050602081019050613111565b5050509392505050565b5f82601f83011261315657613155612e89565b5b81356131668482602086016130da565b91505092915050565b5f5f5f5f5f6080868803121561318857613187612e81565b5b5f86013567ffffffffffffffff8111156131a5576131a4612e85565b5b6131b188828901612f98565b95505060206131c288828901612fe4565b945050604086013567ffffffffffffffff8111156131e3576131e2612e85565b5b6131ef88828901613000565b9350935050606086013567ffffffffffffffff81111561321257613211612e85565b5b61321e88828901613142565b9150509295509295909350565b5f5f6040838503121561324157613240612e81565b5b5f83013567ffffffffffffffff81111561325e5761325d612e85565b5b61326a85828601612f98565b925050602061327b85828601612fe4565b9150509250929050565b61328e81612fc5565b82525050565b5f6020820190506132a75f830184613285565b92915050565b5f67ffffffffffffffff8211156132c7576132c6612ea1565b5b602082029050602081019050919050565b5f6132ea6132e5846132ad565b612eff565b9050808382526020820190506020840283018581111561330d5761330c612ffc565b5b835b8181101561333657806133228882612fe4565b84526020840193505060208101905061330f565b5050509392505050565b5f82601f83011261335457613353612e89565b5b81356133648482602086016132d8565b91505092915050565b5f5f83601f84011261338257613381612e89565b5b8235905067ffffffffffffffff81111561339f5761339e612ff8565b5b6020830191508360208202830111156133bb576133ba612ffc565b5b9250929050565b5f5f5f5f5f608086880312156133db576133da612e81565b5b5f86013567ffffffffffffffff8111156133f8576133f7612e85565b5b61340488828901612f98565b955050602061341588828901612fe4565b945050604086013567ffffffffffffffff81111561343657613435612e85565b5b61344288828901613340565b935050606086013567ffffffffffffffff81111561346357613462612e85565b5b61346f8882890161336d565b92509250509295509295909350565b5f6020828403121561349357613492612e81565b5b5f6134a0848285016130c6565b91505092915050565b5f602082840312156134be576134bd612e81565b5b5f82013567ffffffffffffffff8111156134db576134da612e85565b5b6134e784828501612f98565b91505092915050565b5f60ff82169050919050565b613505816134f0565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61353d8161309f565b82525050565b5f61354e8383613534565b60208301905092915050565b5f602082019050919050565b5f6135708261350b565b61357a8185613515565b935061358583613525565b805f5b838110156135b557815161359c8882613543565b97506135a78361355a565b925050600181019050613588565b5085935050505092915050565b6135cb81612fc5565b82525050565b5f60a083015f8301516135e65f8601826134fc565b50602083015184820360208601526135fe8282613566565b91505060408301516136136040860182613534565b50606083015161362660608601826135c2565b50608083015161363960808601826135c2565b508091505092915050565b5f6020820190508181035f83015261365c81846135d1565b905092915050565b5f5f5f5f5f6080868803121561367d5761367c612e81565b5b5f86013567ffffffffffffffff81111561369a57613699612e85565b5b6136a688828901612f98565b95505060206136b788828901612fe4565b94505060406136c888828901612fe4565b935050606086013567ffffffffffffffff8111156136e9576136e8612e85565b5b6136f588828901613000565b92509250509295509295909350565b61370d8161309f565b82525050565b5f6020820190506137265f830184613704565b92915050565b5f5f5f5f5f5f5f5f5f6101008a8c03121561374a57613749612e81565b5b5f8a013567ffffffffffffffff81111561376757613766612e85565b5b6137738c828d01612f98565b99505060206137848c828d01612fe4565b98505060406137958c828d01612fe4565b97505060606137a68c828d01612fe4565b96505060806137b78c828d016130c6565b95505060a08a013567ffffffffffffffff8111156137d8576137d7612e85565b5b6137e48c828d01613142565b94505060c08a013567ffffffffffffffff81111561380557613804612e85565b5b6138118c828d01613340565b93505060e08a013567ffffffffffffffff81111561383257613831612e85565b5b61383e8c828d0161336d565b92509250509295985092959850929598565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f61387c82613850565b613886818561385a565b9350613896818560208601613864565b80840191505092915050565b5f6138ad8284613872565b915081905092915050565b5f82825260208201905092915050565b7f626574206973206e6f74206c69766500000000000000000000000000000000005f82015250565b5f6138fc600f836138b8565b9150613907826138c8565b602082019050919050565b5f6020820190508181035f830152613929816138f0565b9050919050565b7f62657420686173206e6f74207965742065787069726564203a20626c6f636b2e5f8201527f74696d657374616d705b00000000000000000000000000000000000000000000602082015250565b5f61398a602a8361385a565b915061399582613930565b602a82019050919050565b7f5d2065787069726174696f6e5b00000000000000000000000000000000000000815250565b7f5d00000000000000000000000000000000000000000000000000000000000000815250565b5f6139f68261397e565b9150613a028285613872565b9150613a0d826139a0565b600d82019150613a1d8284613872565b9150613a28826139c6565b6001820191508190509392505050565b5f613a4282613850565b613a4c81856138b8565b9350613a5c818560208601613864565b613a6581612e91565b840191505092915050565b5f6020820190508181035f830152613a888184613a38565b905092915050565b7f696e76616c6964206d6f64657261746f72206e6f6e63650000000000000000005f82015250565b5f613ac46017836138b8565b9150613acf82613a90565b602082019050919050565b5f6020820190508181035f830152613af181613ab8565b9050919050565b5f6060820190508181035f830152613b108186613a38565b9050613b1f6020830185613704565b613b2c6040830184613285565b949350505050565b7f696e76616c6964206d6f64657261746f72207369676e617475726500000000005f82015250565b5f613b68601b836138b8565b9150613b7382613b34565b602082019050919050565b5f6020820190508181035f830152613b9581613b5c565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f77696e6e65722061646472657373206973206e6f7420612070617274696369705f8201527f616e740000000000000000000000000000000000000000000000000000000000602082015250565b5f613c236023836138b8565b9150613c2e82613bc9565b604082019050919050565b5f6020820190508181035f830152613c5081613c17565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f613c8e82612fc5565b9150613c9983612fc5565b9250828202613ca781612fc5565b91508282048414831517613cbe57613cbd613c57565b5b5092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f613cfc82612fc5565b9150613d0783612fc5565b925082613d1757613d16613cc5565b5b828204905092915050565b5f613d2c82612fc5565b9150613d3783612fc5565b9250828201905080821115613d4f57613d4e613c57565b5b92915050565b5f613d5f82612fc5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613d9157613d90613c57565b5b600182019050919050565b7f20686173206265656e207265636f6e63696c6564000000000000000000000000815250565b5f613dcd8284613872565b9150613dd882613d9c565b60148201915081905092915050565b5f613df182612fc5565b9150613dfc83612fc5565b9250828203905081811115613e1457613e13613c57565b5b92915050565b7f20686173206265656e2063616e63656c6c6564206279206f776e657200000000815250565b5f613e4b8284613872565b9150613e5682613e1a565b601c8201915081905092915050565b7f696e76616c6964206e756d626572206f66207369676e617475726573206f72205f8201527f6e6f6e6365730000000000000000000000000000000000000000000000000000602082015250565b5f613ebf6026836138b8565b9150613eca82613e65565b604082019050919050565b5f6020820190508181035f830152613eec81613eb3565b9050919050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83356001602003843603038112613f1b57613f1a613ef3565b5b80840192508235915067ffffffffffffffff821115613f3d57613f3c613ef7565b5b602083019250600182023603831315613f5957613f58613efb565b5b509250929050565b7f5d2068617320616e20696e76616c6964206e6f6e636500000000000000000000815250565b5f613f928284613872565b9150613f9d82613f61565b60168201915081905092915050565b7f206164647265737320646f65736e2774206d61746368207369676e6174757265815250565b5f613fdd8284613872565b9150613fe882613fac565b60208201915081905092915050565b7f20686173206265656e2063616e63656c6c656420627920616c6c2070617274695f8201527f636970616e747300000000000000000000000000000000000000000000000000602082015250565b5f61405160278361385a565b915061405c82613ff7565b602782019050919050565b5f6140728284613872565b915061407d82614045565b915081905092915050565b7f62657420696420646f6573206e6f7420657869737400000000000000000000005f82015250565b5f6140bc6015836138b8565b91506140c782614088565b602082019050919050565b5f6020820190508181035f8301526140e9816140b0565b9050919050565b7f6e6f7420656e6f7567682062616c616e636500000000000000000000000000005f82015250565b5f6141246012836138b8565b915061412f826140f0565b602082019050919050565b5f6020820190508181035f83015261415181614118565b9050919050565b7f77697468647261775b0000000000000000000000000000000000000000000000815250565b7f5d20616d6f756e745b0000000000000000000000000000000000000000000000815250565b5f6141ae82614158565b6009820191506141be8285613872565b91506141c98261417e565b6009820191506141d98284613872565b91506141e4826139c6565b6001820191508190509392505050565b7f20686173206265656e2063616e63656c6c6564206279206d6f64657261746f72815250565b5f6142258284613872565b9150614230826141f4565b60208201915081905092915050565b7f647261696e5b0000000000000000000000000000000000000000000000000000815250565b5f61426f8261423f565b60068201915061427f8285613872565b915061428a8261417e565b60098201915061429a8284613872565b91506142a5826139c6565b6001820191508190509392505050565b7f62657420696420616c72656164792065786973747300000000000000000000005f82015250565b5f6142e96015836138b8565b91506142f4826142b5565b602082019050919050565b5f6020820190508181035f830152614316816142dd565b9050919050565b7f2068617320616e20696e73756666696369656e742062616c616e636500000000815250565b5f61434e8284613872565b91506143598261431d565b601c8201915081905092915050565b7f2068617320616e20696e76616c6964206e6f6e63650000000000000000000000815250565b5f6143998284613872565b91506143a482614368565b60158201915081905092915050565b7f20686173206265656e20616464656420746f207468652073797374656d000000815250565b5f6143e48284613872565b91506143ef826143b3565b601d8201915081905092915050565b7f6465706f7369745b000000000000000000000000000000000000000000000000815250565b7f5d2062616c616e63655b00000000000000000000000000000000000000000000815250565b5f614454826143fe565b6008820191506144648285613872565b915061446f82614424565b600a8201915061447f8284613872565b915061448a826139c6565b6001820191508190509392505050565b7f62657473206d6179206f6e6c792062652063616e63656c65642033302b2064615f8201527f79732061667465722065787069726174696f6e00000000000000000000000000602082015250565b5f6144f46033836138b8565b91506144ff8261449a565b604082019050919050565b5f6020820190508181035f830152614521816144e8565b9050919050565b7f63616e63656c6572206973206e6f7420617574686f72697a656420746f2063615f8201527f6e63656c20746869732062657400000000000000000000000000000000000000602082015250565b5f614582602d836138b8565b915061458d82614528565b604082019050919050565b5f6020820190508181035f8301526145af81614576565b9050919050565b7f20686173206265656e2063616e63656c6c656420627920000000000000000000815250565b7f2073696e63652065787069726564000000000000000000000000000000000000815250565b5f61460d8285613872565b9150614618826145b6565b6017820191506146288284613872565b9150614633826145dc565b600e820191508190509392505050565b5f61464d826134f0565b9150614658836134f0565b9250828201905060ff81111561467157614670613c57565b5b92915050565b5f81519050919050565b5f81905092915050565b5f61469582614677565b61469f8185614681565b93506146af818560208601613864565b80840191505092915050565b5f819050919050565b5f819050919050565b6146de6146d9826146bb565b6146c4565b82525050565b5f6146ef828561468b565b91506146fb82846146cd565b6020820191508190509392505050565b5f5ffd5b5f5ffd5b5f5f858511156147265761472561470b565b5b838611156147375761473661470f565b5b6001850283019150848603905094509492505050565b5f82905092915050565b5f82821b905092915050565b5f61476e838361474d565b8261477981356146bb565b925060208210156147b9576147b47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83602003600802614757565b831692505b505092915050565b6147ca816146bb565b82525050565b6147d9816134f0565b82525050565b5f6080820190506147f25f8301876147c1565b6147ff60208301866147d0565b61480c60408301856147c1565b61481960608301846147c1565b95945050505050565b5f8160011c9050919050565b5f5f8291508390505b60018511156148775780860481111561485357614852613c57565b5b60018516156148625780820291505b808102905061487085614822565b9450614837565b94509492505050565b5f8261488f576001905061494a565b8161489c575f905061494a565b81600181146148b257600281146148bc576148eb565b600191505061494a565b60ff8411156148ce576148cd613c57565b5b8360020a9150848211156148e5576148e4613c57565b5b5061494a565b5060208310610133831016604e8410600b84101617156149205782820a90508381111561491b5761491a613c57565b5b61494a565b61492d848484600161482e565b9250905081840481111561494457614943613c57565b5b81810290505b9392505050565b5f61495b82612fc5565b915061496683612fc5565b92506149937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484614880565b905092915050565b5f6149a5826134f0565b91506149b0836134f0565b9250826149c0576149bf613cc5565b5b828204905092915050565b5f6149d5826134f0565b91506149e0836134f0565b92508282026149ee816134f0565b9150808214614a00576149ff613c57565b5b5092915050565b5f614a11826134f0565b9150614a1c836134f0565b9250828203905060ff811115614a3557614a34613c57565b5b9291505056fea2646970667358221220b1dc272289e4e6f423e399633922ab5213ffa6874d46bf1ca6a811069b6f4e3c64736f6c634300081e0033",
}

// BookABI is the input ABI used to generate the binding from.
// Deprecated: Use BookMetaData.ABI instead.
var BookABI = BookMetaData.ABI

// BookBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BookMetaData.Bin instead.
var BookBin = BookMetaData.Bin

// DeployBook deploys a new Ethereum contract, binding an instance of Book to it.
func DeployBook(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Book, error) {
	parsed, err := BookMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BookBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Book{BookCaller: BookCaller{contract: contract}, BookTransactor: BookTransactor{contract: contract}, BookFilterer: BookFilterer{contract: contract}}, nil
}

// Book is an auto generated Go binding around an Ethereum contract.
type Book struct {
	BookCaller     // Read-only binding to the contract
	BookTransactor // Write-only binding to the contract
	BookFilterer   // Log filterer for contract events
}

// BookCaller is an auto generated read-only Go binding around an Ethereum contract.
type BookCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BookTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BookTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BookFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BookFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BookSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BookSession struct {
	Contract     *Book             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BookCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BookCallerSession struct {
	Contract *BookCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BookTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BookTransactorSession struct {
	Contract     *BookTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BookRaw is an auto generated low-level Go binding around an Ethereum contract.
type BookRaw struct {
	Contract *Book // Generic contract binding to access the raw methods on
}

// BookCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BookCallerRaw struct {
	Contract *BookCaller // Generic read-only contract binding to access the raw methods on
}

// BookTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BookTransactorRaw struct {
	Contract *BookTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBook creates a new instance of Book, bound to a specific deployed contract.
func NewBook(address common.Address, backend bind.ContractBackend) (*Book, error) {
	contract, err := bindBook(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Book{BookCaller: BookCaller{contract: contract}, BookTransactor: BookTransactor{contract: contract}, BookFilterer: BookFilterer{contract: contract}}, nil
}

// NewBookCaller creates a new read-only instance of Book, bound to a specific deployed contract.
func NewBookCaller(address common.Address, caller bind.ContractCaller) (*BookCaller, error) {
	contract, err := bindBook(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BookCaller{contract: contract}, nil
}

// NewBookTransactor creates a new write-only instance of Book, bound to a specific deployed contract.
func NewBookTransactor(address common.Address, transactor bind.ContractTransactor) (*BookTransactor, error) {
	contract, err := bindBook(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BookTransactor{contract: contract}, nil
}

// NewBookFilterer creates a new log filterer instance of Book, bound to a specific deployed contract.
func NewBookFilterer(address common.Address, filterer bind.ContractFilterer) (*BookFilterer, error) {
	contract, err := bindBook(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BookFilterer{contract: contract}, nil
}

// bindBook binds a generic wrapper to an already deployed contract.
func bindBook(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BookMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Book *BookRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Book.Contract.BookCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Book *BookRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Book.Contract.BookTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Book *BookRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Book.Contract.BookTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Book *BookCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Book.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Book *BookTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Book.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Book *BookTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Book.Contract.contract.Transact(opts, method, params...)
}

// AccountBalance is a free data retrieval call binding the contract method 0xe63f341f.
//
// Solidity: function AccountBalance(address account) view returns(uint256)
func (_Book *BookCaller) AccountBalance(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Book.contract.Call(opts, &out, "AccountBalance", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AccountBalance is a free data retrieval call binding the contract method 0xe63f341f.
//
// Solidity: function AccountBalance(address account) view returns(uint256)
func (_Book *BookSession) AccountBalance(account common.Address) (*big.Int, error) {
	return _Book.Contract.AccountBalance(&_Book.CallOpts, account)
}

// AccountBalance is a free data retrieval call binding the contract method 0xe63f341f.
//
// Solidity: function AccountBalance(address account) view returns(uint256)
func (_Book *BookCallerSession) AccountBalance(account common.Address) (*big.Int, error) {
	return _Book.Contract.AccountBalance(&_Book.CallOpts, account)
}

// Balance is a free data retrieval call binding the contract method 0x0ef67887.
//
// Solidity: function Balance() view returns(uint256)
func (_Book *BookCaller) Balance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Book.contract.Call(opts, &out, "Balance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Balance is a free data retrieval call binding the contract method 0x0ef67887.
//
// Solidity: function Balance() view returns(uint256)
func (_Book *BookSession) Balance() (*big.Int, error) {
	return _Book.Contract.Balance(&_Book.CallOpts)
}

// Balance is a free data retrieval call binding the contract method 0x0ef67887.
//
// Solidity: function Balance() view returns(uint256)
func (_Book *BookCallerSession) Balance() (*big.Int, error) {
	return _Book.Contract.Balance(&_Book.CallOpts)
}

// BetDetails is a free data retrieval call binding the contract method 0x364529e5.
//
// Solidity: function BetDetails(string betID) view returns((uint8,address[],address,uint256,uint256))
func (_Book *BookCaller) BetDetails(opts *bind.CallOpts, betID string) (BookBetInfo, error) {
	var out []interface{}
	err := _Book.contract.Call(opts, &out, "BetDetails", betID)

	if err != nil {
		return *new(BookBetInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(BookBetInfo)).(*BookBetInfo)

	return out0, err

}

// BetDetails is a free data retrieval call binding the contract method 0x364529e5.
//
// Solidity: function BetDetails(string betID) view returns((uint8,address[],address,uint256,uint256))
func (_Book *BookSession) BetDetails(betID string) (BookBetInfo, error) {
	return _Book.Contract.BetDetails(&_Book.CallOpts, betID)
}

// BetDetails is a free data retrieval call binding the contract method 0x364529e5.
//
// Solidity: function BetDetails(string betID) view returns((uint8,address[],address,uint256,uint256))
func (_Book *BookCallerSession) BetDetails(betID string) (BookBetInfo, error) {
	return _Book.Contract.BetDetails(&_Book.CallOpts, betID)
}

// Nonce is a free data retrieval call binding the contract method 0x30d0cee9.
//
// Solidity: function Nonce(address account) view returns(uint256)
func (_Book *BookCaller) Nonce(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Book.contract.Call(opts, &out, "Nonce", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonce is a free data retrieval call binding the contract method 0x30d0cee9.
//
// Solidity: function Nonce(address account) view returns(uint256)
func (_Book *BookSession) Nonce(account common.Address) (*big.Int, error) {
	return _Book.Contract.Nonce(&_Book.CallOpts, account)
}

// Nonce is a free data retrieval call binding the contract method 0x30d0cee9.
//
// Solidity: function Nonce(address account) view returns(uint256)
func (_Book *BookCallerSession) Nonce(account common.Address) (*big.Int, error) {
	return _Book.Contract.Nonce(&_Book.CallOpts, account)
}

// Owner is a free data retrieval call binding the contract method 0xb4a99a4e.
//
// Solidity: function Owner() view returns(address)
func (_Book *BookCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Book.contract.Call(opts, &out, "Owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0xb4a99a4e.
//
// Solidity: function Owner() view returns(address)
func (_Book *BookSession) Owner() (common.Address, error) {
	return _Book.Contract.Owner(&_Book.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0xb4a99a4e.
//
// Solidity: function Owner() view returns(address)
func (_Book *BookCallerSession) Owner() (common.Address, error) {
	return _Book.Contract.Owner(&_Book.CallOpts)
}

// CancelBetExpired is a paid mutator transaction binding the contract method 0xf8856b88.
//
// Solidity: function CancelBetExpired(string betID) returns()
func (_Book *BookTransactor) CancelBetExpired(opts *bind.TransactOpts, betID string) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "CancelBetExpired", betID)
}

// CancelBetExpired is a paid mutator transaction binding the contract method 0xf8856b88.
//
// Solidity: function CancelBetExpired(string betID) returns()
func (_Book *BookSession) CancelBetExpired(betID string) (*types.Transaction, error) {
	return _Book.Contract.CancelBetExpired(&_Book.TransactOpts, betID)
}

// CancelBetExpired is a paid mutator transaction binding the contract method 0xf8856b88.
//
// Solidity: function CancelBetExpired(string betID) returns()
func (_Book *BookTransactorSession) CancelBetExpired(betID string) (*types.Transaction, error) {
	return _Book.Contract.CancelBetExpired(&_Book.TransactOpts, betID)
}

// CancelBetModerator is a paid mutator transaction binding the contract method 0x7c64ce36.
//
// Solidity: function CancelBetModerator(string betID, uint256 amountFeeWei, uint256 nonce, bytes signature) returns()
func (_Book *BookTransactor) CancelBetModerator(opts *bind.TransactOpts, betID string, amountFeeWei *big.Int, nonce *big.Int, signature []byte) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "CancelBetModerator", betID, amountFeeWei, nonce, signature)
}

// CancelBetModerator is a paid mutator transaction binding the contract method 0x7c64ce36.
//
// Solidity: function CancelBetModerator(string betID, uint256 amountFeeWei, uint256 nonce, bytes signature) returns()
func (_Book *BookSession) CancelBetModerator(betID string, amountFeeWei *big.Int, nonce *big.Int, signature []byte) (*types.Transaction, error) {
	return _Book.Contract.CancelBetModerator(&_Book.TransactOpts, betID, amountFeeWei, nonce, signature)
}

// CancelBetModerator is a paid mutator transaction binding the contract method 0x7c64ce36.
//
// Solidity: function CancelBetModerator(string betID, uint256 amountFeeWei, uint256 nonce, bytes signature) returns()
func (_Book *BookTransactorSession) CancelBetModerator(betID string, amountFeeWei *big.Int, nonce *big.Int, signature []byte) (*types.Transaction, error) {
	return _Book.Contract.CancelBetModerator(&_Book.TransactOpts, betID, amountFeeWei, nonce, signature)
}

// CancelBetOwner is a paid mutator transaction binding the contract method 0x0ee216b7.
//
// Solidity: function CancelBetOwner(string betID, uint256 amountFeeWei) returns()
func (_Book *BookTransactor) CancelBetOwner(opts *bind.TransactOpts, betID string, amountFeeWei *big.Int) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "CancelBetOwner", betID, amountFeeWei)
}

// CancelBetOwner is a paid mutator transaction binding the contract method 0x0ee216b7.
//
// Solidity: function CancelBetOwner(string betID, uint256 amountFeeWei) returns()
func (_Book *BookSession) CancelBetOwner(betID string, amountFeeWei *big.Int) (*types.Transaction, error) {
	return _Book.Contract.CancelBetOwner(&_Book.TransactOpts, betID, amountFeeWei)
}

// CancelBetOwner is a paid mutator transaction binding the contract method 0x0ee216b7.
//
// Solidity: function CancelBetOwner(string betID, uint256 amountFeeWei) returns()
func (_Book *BookTransactorSession) CancelBetOwner(betID string, amountFeeWei *big.Int) (*types.Transaction, error) {
	return _Book.Contract.CancelBetOwner(&_Book.TransactOpts, betID, amountFeeWei)
}

// CancelBetParticipants is a paid mutator transaction binding the contract method 0x221da6a5.
//
// Solidity: function CancelBetParticipants(string betID, uint256 amountFeeWei, uint256[] nonces, bytes[] signatures) returns()
func (_Book *BookTransactor) CancelBetParticipants(opts *bind.TransactOpts, betID string, amountFeeWei *big.Int, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "CancelBetParticipants", betID, amountFeeWei, nonces, signatures)
}

// CancelBetParticipants is a paid mutator transaction binding the contract method 0x221da6a5.
//
// Solidity: function CancelBetParticipants(string betID, uint256 amountFeeWei, uint256[] nonces, bytes[] signatures) returns()
func (_Book *BookSession) CancelBetParticipants(betID string, amountFeeWei *big.Int, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Book.Contract.CancelBetParticipants(&_Book.TransactOpts, betID, amountFeeWei, nonces, signatures)
}

// CancelBetParticipants is a paid mutator transaction binding the contract method 0x221da6a5.
//
// Solidity: function CancelBetParticipants(string betID, uint256 amountFeeWei, uint256[] nonces, bytes[] signatures) returns()
func (_Book *BookTransactorSession) CancelBetParticipants(betID string, amountFeeWei *big.Int, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Book.Contract.CancelBetParticipants(&_Book.TransactOpts, betID, amountFeeWei, nonces, signatures)
}

// Deposit is a paid mutator transaction binding the contract method 0xed21248c.
//
// Solidity: function Deposit() payable returns()
func (_Book *BookTransactor) Deposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "Deposit")
}

// Deposit is a paid mutator transaction binding the contract method 0xed21248c.
//
// Solidity: function Deposit() payable returns()
func (_Book *BookSession) Deposit() (*types.Transaction, error) {
	return _Book.Contract.Deposit(&_Book.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xed21248c.
//
// Solidity: function Deposit() payable returns()
func (_Book *BookTransactorSession) Deposit() (*types.Transaction, error) {
	return _Book.Contract.Deposit(&_Book.TransactOpts)
}

// Drain is a paid mutator transaction binding the contract method 0xd67a073f.
//
// Solidity: function Drain() payable returns()
func (_Book *BookTransactor) Drain(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "Drain")
}

// Drain is a paid mutator transaction binding the contract method 0xd67a073f.
//
// Solidity: function Drain() payable returns()
func (_Book *BookSession) Drain() (*types.Transaction, error) {
	return _Book.Contract.Drain(&_Book.TransactOpts)
}

// Drain is a paid mutator transaction binding the contract method 0xd67a073f.
//
// Solidity: function Drain() payable returns()
func (_Book *BookTransactorSession) Drain() (*types.Transaction, error) {
	return _Book.Contract.Drain(&_Book.TransactOpts)
}

// PlaceBet is a paid mutator transaction binding the contract method 0xe2a06aca.
//
// Solidity: function PlaceBet(string betID, uint256 amountBetWei, uint256 amountFeeWei, uint256 expiration, address moderator, address[] participants, uint256[] nonces, bytes[] signatures) returns()
func (_Book *BookTransactor) PlaceBet(opts *bind.TransactOpts, betID string, amountBetWei *big.Int, amountFeeWei *big.Int, expiration *big.Int, moderator common.Address, participants []common.Address, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "PlaceBet", betID, amountBetWei, amountFeeWei, expiration, moderator, participants, nonces, signatures)
}

// PlaceBet is a paid mutator transaction binding the contract method 0xe2a06aca.
//
// Solidity: function PlaceBet(string betID, uint256 amountBetWei, uint256 amountFeeWei, uint256 expiration, address moderator, address[] participants, uint256[] nonces, bytes[] signatures) returns()
func (_Book *BookSession) PlaceBet(betID string, amountBetWei *big.Int, amountFeeWei *big.Int, expiration *big.Int, moderator common.Address, participants []common.Address, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Book.Contract.PlaceBet(&_Book.TransactOpts, betID, amountBetWei, amountFeeWei, expiration, moderator, participants, nonces, signatures)
}

// PlaceBet is a paid mutator transaction binding the contract method 0xe2a06aca.
//
// Solidity: function PlaceBet(string betID, uint256 amountBetWei, uint256 amountFeeWei, uint256 expiration, address moderator, address[] participants, uint256[] nonces, bytes[] signatures) returns()
func (_Book *BookTransactorSession) PlaceBet(betID string, amountBetWei *big.Int, amountFeeWei *big.Int, expiration *big.Int, moderator common.Address, participants []common.Address, nonces []*big.Int, signatures [][]byte) (*types.Transaction, error) {
	return _Book.Contract.PlaceBet(&_Book.TransactOpts, betID, amountBetWei, amountFeeWei, expiration, moderator, participants, nonces, signatures)
}

// ReconcileBet is a paid mutator transaction binding the contract method 0x0e302132.
//
// Solidity: function ReconcileBet(string betID, uint256 nonce, bytes signature, address[] winners) returns()
func (_Book *BookTransactor) ReconcileBet(opts *bind.TransactOpts, betID string, nonce *big.Int, signature []byte, winners []common.Address) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "ReconcileBet", betID, nonce, signature, winners)
}

// ReconcileBet is a paid mutator transaction binding the contract method 0x0e302132.
//
// Solidity: function ReconcileBet(string betID, uint256 nonce, bytes signature, address[] winners) returns()
func (_Book *BookSession) ReconcileBet(betID string, nonce *big.Int, signature []byte, winners []common.Address) (*types.Transaction, error) {
	return _Book.Contract.ReconcileBet(&_Book.TransactOpts, betID, nonce, signature, winners)
}

// ReconcileBet is a paid mutator transaction binding the contract method 0x0e302132.
//
// Solidity: function ReconcileBet(string betID, uint256 nonce, bytes signature, address[] winners) returns()
func (_Book *BookTransactorSession) ReconcileBet(betID string, nonce *big.Int, signature []byte, winners []common.Address) (*types.Transaction, error) {
	return _Book.Contract.ReconcileBet(&_Book.TransactOpts, betID, nonce, signature, winners)
}

// Withdraw is a paid mutator transaction binding the contract method 0x57ea89b6.
//
// Solidity: function Withdraw() payable returns()
func (_Book *BookTransactor) Withdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Book.contract.Transact(opts, "Withdraw")
}

// Withdraw is a paid mutator transaction binding the contract method 0x57ea89b6.
//
// Solidity: function Withdraw() payable returns()
func (_Book *BookSession) Withdraw() (*types.Transaction, error) {
	return _Book.Contract.Withdraw(&_Book.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x57ea89b6.
//
// Solidity: function Withdraw() payable returns()
func (_Book *BookTransactorSession) Withdraw() (*types.Transaction, error) {
	return _Book.Contract.Withdraw(&_Book.TransactOpts)
}

// BookEventLogIterator is returned from FilterEventLog and is used to iterate over the raw logs and unpacked data for EventLog events raised by the Book contract.
type BookEventLogIterator struct {
	Event *BookEventLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BookEventLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BookEventLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BookEventLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BookEventLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BookEventLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BookEventLog represents a EventLog event raised by the Book contract.
type BookEventLog struct {
	Value string
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterEventLog is a free log retrieval operation binding the contract event 0xd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a.
//
// Solidity: event EventLog(string value)
func (_Book *BookFilterer) FilterEventLog(opts *bind.FilterOpts) (*BookEventLogIterator, error) {

	logs, sub, err := _Book.contract.FilterLogs(opts, "EventLog")
	if err != nil {
		return nil, err
	}
	return &BookEventLogIterator{contract: _Book.contract, event: "EventLog", logs: logs, sub: sub}, nil
}

// WatchEventLog is a free log subscription operation binding the contract event 0xd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a.
//
// Solidity: event EventLog(string value)
func (_Book *BookFilterer) WatchEventLog(opts *bind.WatchOpts, sink chan<- *BookEventLog) (event.Subscription, error) {

	logs, sub, err := _Book.contract.WatchLogs(opts, "EventLog")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BookEventLog)
				if err := _Book.contract.UnpackLog(event, "EventLog", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEventLog is a log parse operation binding the contract event 0xd3c51ea1865a5f43e30629abcc5e5f1f5a8a28d7cd45aface7cb4bb5c4a1a18a.
//
// Solidity: event EventLog(string value)
func (_Book *BookFilterer) ParseEventLog(log types.Log) (*BookEventLog, error) {
	event := new(BookEventLog)
	if err := _Book.contract.UnpackLog(event, "EventLog", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
